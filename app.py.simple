from flask import Flask, jsonify, request
from flask_cors import CORS
import logging
import os

# Import required components
try:
    from app.core.document_loader import DocumentLoader
    from app.core.text_splitter import TextSplitter
    from app.core.embeddings import EmbeddingGenerator
    from app.core.vector_store import VectorStore
    from app.services.retrieval_service import RetrievalService
    from app.services.translation_service import TranslationService
    from app.services.chat_service import ChatService
    from app.api.routes import api, init_api
except ImportError as e:
    logging.error(f"Import error: {e}")

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def create_app():
    """Create and configure the Flask application."""
    app = Flask(__name__)
    
    # Add a basic health check endpoint
    @app.route('/health')
    def health_check():
        return jsonify({"status": "healthy"})
    
    # Add a test endpoint
    @app.route('/test')
    def test_endpoint():
        return jsonify({"message": "API is working!"})

    # Configure CORS
    CORS(app, resources={r"/api/*": {"origins": "*"}})
    
    try:
        # Initialize components
        try:
            # Load and process documents
            logger.info("Loading and processing documents...")
            document_loader = DocumentLoader("data")
            documents = document_loader.load_documents()
            
            # Split documents into chunks
            text_splitter = TextSplitter()
            chunked_documents = text_splitter.split_documents(documents)
            
            # Generate embeddings
            embedding_generator = EmbeddingGenerator()
            documents_with_embeddings = embedding_generator.generate_embeddings(chunked_documents)
            
            # Initialize vector store
            vector_store = VectorStore()
            vector_store.add_documents(documents_with_embeddings)
            
            # Initialize services
            retrieval_service = RetrievalService(vector_store, embedding_generator)
            translation_service = TranslationService()
            chat_service = ChatService(retrieval_service, translation_service)
            
            # Initialize API routes
            init_api(chat_service)
            app.register_blueprint(api, url_prefix='/api')
            
            logger.info("Application initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing RAG components: {str(e)}")
            
            # Still register a simple chat endpoint even if RAG fails
            @app.route('/api/chat', methods=['POST'])
            def simple_chat():
                try:
                    data = request.get_json()
                    query = data.get('query', '')
                    language = data.get('language', 'en')
                    
                    # Return a simple response
                    return jsonify({
                        "main_answer": f"This is a fallback response as the RAG system couldn't be initialized. You asked: '{query}' in {language}.",
                        "legal_references": []
                    })
                except Exception as chat_err:
                    logger.error(f"Error in simple chat endpoint: {str(chat_err)}")
                    return jsonify({"error": "Internal server error"}), 500
    
    except Exception as e:
        logger.error(f"Error in app creation: {str(e)}")
    
    return app

if __name__ == "__main__":
    app = create_app()
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
